!load( message_logging ) : error( Can not find feature \"message_logging\" )
!load( file_system ) : errorLogging( Can not find feature \"file_system\" )


defineTest( includeFilesFrom ) \
{
    directories = $${1}
    flag = $${2}

    unset( result )
    for( i, 0..1000 ) \
    {
        unset( next_directories )
        isEmpty( directories ) : \
            break()

        for( directory, directories ) \
        {
            entries = $$files( "$${directory}/*" )
            !isEmpty( entries ) \
            {
                HEADERS *= $$files( $${directory}/*.h )
                HEADERS *= $$files( $${directory}/*.hpp )
                SOURCES *= $$files( $${directory}/*.c )
                SOURCES *= $$files( $${directory}/*.cpp )
                FORMS *= $$files( $${directory}/*.ui )
                LEXSOURCES *= $$files( $${directory}/*.l )
                RES_FILE *= $$files( $${directory}/*.rc )
                RESOURCES *= $$files( $${directory}/*.qrc )
                TRANSLATIONS *= $$files( $${directory}/*.ts )
                DISTFILES *= $$files( $${directory}/*.vert )
                DISTFILES *= $$files( $${directory}/*.frag )
                DISTFILES *= $$files( $${directory}/*.qml )
                DISTFILES *= $$files( $${directory}/*.js )
            }

            for( entry, entries ) \
            {
                entry_files = $$files( "$${entry}/*" )
                !isEmpty( entry_files ) \
                {
                    next_directories *= "$${entry}"
                    result *= "$${entry}"
                }
            }
        }
        !isEqual( flag, "recursive" ) : \
            break()

        directories = $${next_directories}
    }

    export( HEADERS )
    export( SOURCES )
    export( FORMS )
    export( LEXSOURCES )
    export( RES_FILE )
    export( RESOURCES )
    export( TRANSLATIONS )
    export( DISTFILES )

    return( true )
}

defineTest( includeFiles ) \
{
    includeFilesFrom( $${1}, recursive ) : \
        return( true )
    return( false )
}

defineReplace( privateJoinCommonDirectory ) \
{
    result = $${1}
    directory = $${2}

    isEmpty( result ) \
    {
        result = "$${directory}"
        return( $${result} )
    }

    !isEmpty( directory ) \
    {
        result = "$$commonPathForTwoPaths( "$${result}", "$${directory}" )"
    }
    return( "$${result}" )
}

defineReplace( commonDirectoryForSources ) \
{
    unset( result )
    directory = $$commonPathForPaths( $${HEADERS} )
    result = "$$privateJoinCommonDirectory( "$${result}", "$${directory}" )"
    directory = $$commonPathForPaths( $${SOURCES} )
    result = "$$privateJoinCommonDirectory( "$${result}", "$${directory}" )"
    directory = $$commonPathForPaths( $${LEXSOURCES} )
    result = "$$privateJoinCommonDirectory( "$${result}", "$${directory}" )"
    directory = $$commonPathForPaths( $${RES_FILE} )
    result = "$$privateJoinCommonDirectory( "$${result}", "$${directory}" )"
    directory = $$commonPathForPaths( $${RESOURCES} )
    result = "$$privateJoinCommonDirectory( "$${result}", "$${directory}" )"
    directory = $$commonPathForPaths( $${TRANSLATIONS} )
    result = "$$privateJoinCommonDirectory( "$${result}", "$${directory}" )"
    directory = $$commonPathForPaths( $${DISTFILES} )
    result = "$$privateJoinCommonDirectory( "$${result}", "$${directory}" )"

    return( "$${result}" )
}
