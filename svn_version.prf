# Если атрибут pwd переменой SVN_VERSION (SVN.pwd) не указан явно,
# то считается, что проектный файл является частью репозитория.
# Либо можно явно задать значение SVN.pwd, если проектный файл
# не является частью репозитория (например, для проектов 3rdparty).

!load( message_logging ) : error( Can not find feature \"message_logging\" )
!load( file_system ) : errorLogging( Can not find feature \"file_system\" )
!load( include_files ) : errorLogging( Can not find feature \"include_files\" )

defineTest( defineSvnVersion ) \
{
    SVN.svn_version = $$system( svn --version --quiet )
    isEmpty( SVN.svn_version ) : \
        return( false )

    isEmpty( SVN.pwd ) \
    {
        !lessThan( SVN.svn_version, "1.7.0" ) \
        {
            SVN.pwd = $$findUpperDirectoryWith( ".svn", "$$first(SOURCES)" )
            isEmpty( SVN.pwd ) : \
                SVN.pwd = $$findUpperDirectoryWith( ".svn", "$$first(HEADERS)" )
        } \
        else \
        {
            SVN.pwd = $$commonDirectoryForSources()
            SVN.test = $$findUpperDirectoryWith( ".svn", "$${SVN.pwd}" )
            isEmpty( SVN.test ) : \
                return( false )
        }
    }

    isEmpty( SVN.pwd ) : \
        return( false )

    SVN.info = $$system( cd \"$${SVN.pwd}\" && svn info )

    unset( previous_value )
    for( current_value, SVN.info ) \
    {
        !isEmpty( SVN.time ) : \
            isEmpty( SVN.time_zone ) \
                SVN.time_zone = $${current_value}

        !isEmpty( SVN.date ) : \
            isEmpty( SVN.time ) \
                SVN.time = $${current_value}

        isEqual( previous_value, "Date:" ) : \
            isEmpty( SVN.date ) \
                SVN.date = $${current_value}

        isEqual( previous_value, "Rev:" ) : \
            SVN.revision = $${current_value}

        isEqual( previous_value, "URL:" ) : \
            isEmpty( SVN.url ) : \
                SVN.url = $${current_value}

        isEqual( previous_value, "Root:" ) : \
            isEmpty( SVN.root ) : \
                SVN.root = $${current_value}

        previous_value = $${current_value}
    }

    SVN.revision_moment = "$${SVN.date} $${SVN.time} $${SVN.time_zone}"

    isEmpty( SVN.revision ) : \
        return( false )

    !isEmpty( SVN.url ) : !isEmpty( SVN.root ) \
    {
        SVN.relative_path = $$split( SVN.url, "$${SVN.root}" )
        SVN.path_list = $$split( SVN.relative_path, "/" )
        SVN.branch = $$member( SVN.path_list, 0 )

        isEqual( SVN.branch, "branches" ) | isEqual( SVN.branch, "tags" ) \
        {
            SVN.branch = $${SVN.branch}/$$member( SVN.path_list, 1 )
            SVN.version = $$member( SVN.path_list, 1 )
        } \
        else \
        {
            SVN.version = $${SVN.branch}
        }
    }

    DEFINES *= \
        SVN_VERSION=\\\"$${SVN.version}\\\" \
        SVN_BRANCH=\\\"$${SVN.branch}\\\" \
        SVN_REVISION=\\\"$${SVN.revision}\\\" \

    !isEmpty( SVN.revision ) : \
        messageLogging( "Svn version of $${TARGET} \($${SVN.pwd}\) is \"$${SVN.version}\", revision is \"$${SVN.revision}\", branch is \"$${SVN.branch}\", date is \"$${SVN.revision_moment}\"." )

    export( DEFINES )

    export( SVN.branch )
    export( SVN.pwd )
    export( SVN.revision )
    export( SVN.revision_moment )
    export( SVN.version )

    return( true )
}

# Main
defineSvnVersion()
