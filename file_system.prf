# Some of functionality exists in Qt5 initially.
# This functions work fo Qt4 and Qt5.

!load( message_logging ) : error( Can not find feature \"message_logging\" )

# Make directory with subdirectories.
defineTest( makeDirectory ) {
    exists( "$${ARGS}" ) : \
        return( true )

    win32* | win64* {
        COMMAND = "mkdir \"$${ARGS}\""
    } else {
        COMMAND = "mkdir \'-p\' \'$${ARGS}\'"
    }
    !system( "$${COMMAND}" ) {
        messageLogging( "System command: \"$${COMMAND}\"" )
        errorLogging( "Can not make directory \"$${ARGS}\"" )
        return( false )
    }
    return( true )
}

# Make empty file with directories if it needed.
defineTest( makeEmptyFile ) {
    DIR_NAME = $$dirname( ARGS )
    FILE_NAME = $$basename( ARGS )

    makeDirectory( "$${DIR_NAME}" )

    win32* | win64* {
        COMMAND = "copy /Y NUL \"$${ARGS}\""
    } else {
        COMMAND = ":> \'$${ARGS}\'"
    }
    !system( "$${COMMAND}" ) {
        messageLogging( "System command: \"$${COMMAND}\"" )
        errorLogging( "Can not create file \"$${ARGS}\"" )
        return( false )
    }
    return( true )
}

# Append lines to file
defineTest( appendToFile ) {
    for( arg, ARGS ) {
        isEmpty( FILE_PATH ) {
            FILE_PATH = "$${arg}"
        } else {

            win32* | win64* {
                #arg = $$replace( arg, "^", "^^" )
                #arg = $$replace( arg, "|", "^|" )
                arg = $$replace( arg, "<", "^<" )
                arg = $$replace( arg, ">", "^>" )
                arg = $$replace( arg, "&", "^&" )

                COMMAND = "echo $${arg}>> \"$${FILE_PATH}\""
            } else {
                COMMAND = "echo \'$${arg}\' >> \'$${FILE_PATH}\'"
            }
            !system( "$${COMMAND}" ) {
                messageLogging( "System command: \"$${COMMAND}\"" )
                errorLogging( "Can not append anything to file \"$${ARGS}\"" )
                return( false )
            }
            return( true )
        }
    }
    return( true )
}

# Find direcrory with value
# example: findUpperDirectoryWith( bin, /home/user/working )
defineReplace( findUpperDirectoryWith ) {
    result =

    item = "$$1"
    isEmpty( item ) {
        errorLogging( "[findUpperDirectoryWith] - The name of item is empty." )
        return("$${result})
    }

    result = $$2
    isEmpty( result ) {
        errorLogging( "[findUpperDirectoryWith] - The base directory is empty" )
        return("$${result}")
    }

    for( tmp, 1..100 ) {
        test_value = "$${result}/$${item}"
        exists( $${test_value} ) : \
            break()
        result = "$$dirname( result )"
        isEmpty( result ) : \
            break()
    }

    return("$${result}")
}

# Test path on relative or absolute value
defineTest( isRelativePath ) {
    return( false )
}

defineReplace( absolutePath ) {
    return(0)
}

defineReplace( relativePath ) {
    return(0)
}

defineReplace( cleanPath ) {
    return(0)
}

defineReplace( commonPathForTwoPaths ) {
    result =

    first_path = "$$1"
    isEmpty( first_path ) {
        errorLogging( "[commonPathForTwoPaths] - The first path is empty." )
        return("$${result}")
    }
    isRelativePath( $$first_path ) {
        errorLogging( "[commonPathForTwoPaths] - The first path is relative." )
        return("$${result}")
    }

    second_path = "$$2"
    isEmpty( second_path ) {
        errorLogging( "[commonPathForTwoPaths] - The second path is empty." )
        return("$${result}")
    }
    isRelativePath( $$second_path ) {
        errorLogging( "[commonPathForTwoPaths] - The second path is relative." )
        return("$${result}")
    }

    first_list = $$split( first_path, "/" )
    second_list = $$split( second_path, "/" )

    for( i, 0..100 ) {
        first_value = $$member( first_list, $${i} )
        second_value = $$member( second_list, $${i} )
        isEmpty( first_value ) | !isEqual( first_value, "$${second_value}" ) : \
            break()
         win32* | win64* {
            isEmpty( result ) {
                result = "$${first_value}"
            } else {
                result = "$${result}/$${first_value}"
            }
        } else {
            result = "$${result}/$${first_value}"
        }

    }
    return( "$${result}" )
}

defineReplace( commonPathForPaths ) {
    result =
    relative_prefix = $${_PRO_FILE_PWD_}

    for( path, ARGS ) {
        isRelativePath( "$${path}" ) : \
            path = "$${relative_prefix}/$${path}"

        isEmpty( result ) {
            result = "$$dirname( path )"
        } else {
            result = "$$commonPathForTwoPaths( "$${result}", "$$dirname( path )" )"
        }
    }
    return( "$${result}" )
}
