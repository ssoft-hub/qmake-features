# Some of functionality exists in Qt5 initially.
# This functions work fo Qt4 and Qt5.

!load( message_logging ) : error( Can not find feature \"message_logging\" )

# Make directory with subdirectories.
defineTest( makePath ) \
{
    isEqual( QT_MAJOR_VERSION, 4 ) \
    {
        exists( "$${ARGS}" ) : \
            return( true )

        win32 | win64 \
        {
            COMMAND = "mkdir \"$${ARGS}\""
        } \
        else \
        {
            COMMAND = "mkdir \'-p\' \'$${ARGS}\'"
        }

        !system( "$${COMMAND}" ) \
        {
            messageLogging( "System command: \"$${COMMAND}\"" )
            errorLogging( "Can not make directory \"$${ARGS}\"" )
            return( false )
        }

        return( true )
    }

    isEqual( QT_MAJOR_VERSION, 5 ) \
    {
        mkpath( "$${ARGS}" ) : \
            return( true )
    }

    return( false )
}

# Make empty file with directories if it needed.
defineTest( makeEmptyFile ) \
{
    DIR_NAME = $$dirname( ARGS )
    FILE_NAME = $$basename( ARGS )

    makePath( "$${DIR_NAME}" )

    win32 | win64 \
    {
        COMMAND = "copy /Y NUL \"$${ARGS}\""
    } \
    else \
    {
        COMMAND = ":> \'$${ARGS}\'"
    }

    !system( "$${COMMAND}" ) \
    {
        messageLogging( "System command: \"$${COMMAND}\"" )
        errorLogging( "Can not create file \"$${ARGS}\"" )
        return( false )
    }

    return( true )
}

# Append lines to file
defineTest( appendToFile ) \
{
    file_path = $${1}
    file_data = $${2}

    for( file_line, file_data ) \
    {
        isEqual( QT_MAJOR_VERSION, 4 ) \
        {
            win32 | win64 \
            {
                #file_line = $$replace( file_line, "^", "^^" )
                #file_line = $$replace( file_line, "|", "^|" )
                file_line = $$replace( file_line, "<", "^<" )
                file_line = $$replace( file_line, ">", "^>" )
                file_line = $$replace( file_line, "&", "^&" )

                COMMAND = "echo $${file_line}>> \"$${file_path}\""
            } \
            else \
            {
                COMMAND = "echo \'$${file_line}\' >> \'$${file_path}\'"
            }

            !system( "$${COMMAND}" ) \
            {
                messageLogging( "System command: \"$${COMMAND}\"" )
                errorLogging( "Can not append anything to file \"$${file_path}\"." )
                return( false )
            }
        }

        isEqual( QT_MAJOR_VERSION, 5 ) \
        {
            !write_file( "$${file_path}", file_line, append ) \
            {
                errorLogging( "Can not append anything to file \"$${file_path}\"." )
                return( false )
            }
        }
    }

    return( true )
}

defineTest( writeToFile ) \
{
    file_path = $${1}
    file_data = $${2}

    isEqual( QT_MAJOR_VERSION, 4 ) \
    {
        makeEmptyFile( "$${file_path}" )
        appendToFile( "$${file_path}", $${file_data} )
    }

    isEqual( QT_MAJOR_VERSION, 5 ) \
    {
        !write_file( "$${file_path}", file_data ) \
        {
            errorLogging( "Can not write file \"$${file_path}\"." )
        }
    }
}

defineTest( copyFile ) \
{
    source = $${1}
    destination = $${2}

    win32 | win64 \
    {
        COMMAND = "copy /Y \"$${source}\" \"$${destination}\""
    } \
    else \
    {
        COMMAND = "cp  \"$${source}\" \"$${destination}\""
    }

    !system( "$${COMMAND}" ) \
    {
        messageLogging( "System command: \"$${COMMAND}\"" )
        errorLogging( "Can not copy file \"$${ARGS}\"" )
        return( false )
    }

    return( true )
}

# Find direcrory with value
# example: findUpperDirectoryWith( bin, /home/user/working )
defineReplace( findUpperDirectoryWith ) \
{
    unset( result )

    item = $${1}
    isEmpty( item ) \
    {
        errorLogging( "[findUpperDirectoryWith] - The name of item is empty." )
        return( "$${result}" )
    }

    result = $${2}
    isEmpty( result ) \
    {
        #errorLogging( "[findUpperDirectoryWith] - The base directory is empty" )
        return( "$${result}" )
    }

    for( i, 0..1000 ) \
    {
        test_value = "$${result}/$${item}"
        exists( $${test_value} ) : \
            break()
        result = "$$dirname( result )"
        isEmpty( result ) : \
            break()
    }

    return( "$${result}" )
}

# Test path on relative or absolute value
defineTest( isRelativePath ) \
{
    test_path = $${1}

    win32 | win64 \
    {
        test_value = "$$replace( test_path, ":", "%" )"
        isEqual( test_path, "$${test_value}" ) : \
            return( true )
    } \
    else \
    {
        test_value = "%$${test_path}"
        test_value = "$$replace( test_value, "%/", "/" )"
        isEqual( test_path, "$${test_value}" ) : \
            return( false )
    }
    return( false )
}

defineReplace( absolutePath ) \
{
    isRelativePath( "$${1}" ) : \
        return( "$${_PRO_FILE_PWD_}/$${1}" )
    return ( "$${1}" )
}

defineReplace( cleanPath ) \
{
    isEqual( QT_MAJOR_VERSION, 4 ) \
    {
        result = "$${1}"
        win32 : result = "$$replace( result, "\\\\", "/" )"
        result = "$$replace( result, "//", "/" )"
        result = "$$absolutePath( "$${result}" )"
        result_list = $$split( result, "/" )

        unset( result )
        for( result_list_value, result_list ) \
        {
            isEqual( result_list_value, ".." ) \
            {
                result = "$$dirname( result )"
            } \
            else : !isEqual( result_list_value, "." ) \
            {
                win32 | win64 \
                {
                    isEmpty( result ) \
                    {
                        result = "$${result_list_value}"
                    } \
                    else \
                    {
                        result = "$${result}/$${result_list_value}"
                    }
                } \
                else \
                {
                    result = "$${result}/$${result_list_value}"
                }
            }
        }
        return( "$${result}" )
    }

    isEqual( QT_MAJOR_VERSION, 5 ) \
    {
        return( "$$clean_path( "$${1}" )" )
    }

    return( "$${1}" )
}

defineReplace( commonPathForTwoPaths ) \
{
    unset( result )

    first_path = "$$absolutePath( "$$cleanPath( $${1} )" )"
    isEmpty( first_path ) \
    {
        errorLogging( "[commonPathForTwoPaths] - The first path is empty." )
        return( "$${result}" )
    }

    second_path = "$$absolutePath( "$$cleanPath( $${2} )" )"
    isEmpty( second_path ) \
    {
        errorLogging( "[commonPathForTwoPaths] - The second path is empty." )
        return( "$${result}" )
    }

    first_list = $$split( first_path, "/" )
    second_list = $$split( second_path, "/" )

    for( i, 0..1000 ) \
    {
        first_value = $$member( first_list, $${i} )
        second_value = $$member( second_list, $${i} )
        isEmpty( first_value ) | !isEqual( first_value, "$${second_value}" ) : \
            break()

        win32 | win64 \
        {
            isEmpty( result ) \
            {
                result = "$${first_value}"
            } \
            else \
            {
                result = "$${result}/$${first_value}"
            }
        } \
        else \
        {
            result = "$${result}/$${first_value}"
        }
    }

    return( "$${result}" )
}

defineReplace( commonPathForPaths ) \
{
    unset( result )

    for( path, ARGS ) \
    {
        isEmpty( result ) \
        {
            result = "$$absolutePath( "$$dirname( path )" )"
        } \
        else \
        {
            result = "$$commonPathForTwoPaths( "$${result}", "$$dirname( path )" )"
        }
    }
    return( "$${result}" )
}

defineReplace( subDirectories ) \
{
    directories = $${1}
    flag = $${2}

    unset( result )
    for( i, 0..1000 ) \
    {
        unset( next_directories )
        for( directory, directories ) \
        {
            entries = $$files( "$${directory}/*" )
            for( entry, entries ) \
            {
                sub_entries = $$files( "$${entry}/*" )
                !isEmpty( sub_entries ) \
                {
                    next_directories *= "$${entry}"
                    result *= "$${entry}"
                }
            }
        }
        directories = $${next_directories}

        !isEqual( flag, "recursive" ) : \
            break()
    }

    return( $${result} )
}
