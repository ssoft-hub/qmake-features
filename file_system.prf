# Some of functionality exists in Qt5 initially.
# This functions work fo Qt4 and Qt5.

!load( message_logging ) : error( Can not find feature \"message_logging\" )

# Make directory with subdirectories.
defineTest( makeDirectory ) {
    exists( "$${ARGS}" ) : \
        return( true )

    win32* | win64* {
        COMMAND = "mkdir \"$${ARGS}\""
    } else {
        COMMAND = "mkdir \'-p\' \'$${ARGS}\'"
    }
    !system( "$${COMMAND}" ) {
        messageLogging( "System command: \"$${COMMAND}\"" )
        errorLogging( "Can not make directory \"$${ARGS}\"" )
        return( false )
    }
    return( true )
}

# Make empty file with directories if it needed.
defineTest( makeEmptyFile ) {
    DIR_NAME = $$dirname( ARGS )
    FILE_NAME = $$basename( ARGS )

    makeDirectory( "$${DIR_NAME}" )

    win32* | win64* {
        COMMAND = "copy /Y NUL \"$${ARGS}\""
    } else {
        COMMAND = ":> \'$${ARGS}\'"
    }
    !system( "$${COMMAND}" ) {
        messageLogging( "System command: \"$${COMMAND}\"" )
        errorLogging( "Can not create file \"$${ARGS}\"" )
        return( false )
    }
    return( true )
}

# Append lines to file
defineTest( appendToFile ) {
    for( arg, ARGS ) {
        isEmpty( FILE_PATH ) {
            FILE_PATH = "$${arg}"
        } else {

            win32* | win64* {
                #arg = $$replace( arg, "^", "^^" )
                #arg = $$replace( arg, "|", "^|" )
                arg = $$replace( arg, "<", "^<" )
                arg = $$replace( arg, ">", "^>" )
                arg = $$replace( arg, "&", "^&" )

                COMMAND = "echo $${arg}>> \"$${FILE_PATH}\""
            } else {
                COMMAND = "echo \'$${arg}\' >> \'$${FILE_PATH}\'"
            }
            !system( "$${COMMAND}" ) {
                messageLogging( "System command: \"$${COMMAND}\"" )
                errorLogging( "Can not append anything to file \"$${ARGS}\"" )
                return( false )
            }
            return( true )
        }
    }
    return( true )
}

# Find direcrory with value
# example: findUpperDirectoryWith( /home/user/working, bin )
defineReplace( findUpperDirectoryWith ) {
    FIND_NAME = "$$1"
    BASE_NAME = "$$2"

    !isEmpty( $$3 ) {
        errorLogging( "A lot of input parameters - method \"upperDirectoryWith\"" )
        return(0)
    }

    isEmpty( FIND_NAME ) {
        errorLogging( "The name of find object is not inputted" )
        return(0)
    }

    isEmpty( BASE_NAME ) {
        errorLogging( "The base directory is not inputted" )
        return(0)
    }

    for( tmp, 1..100 ) {
        TEST_NAME = "$${BASE_NAME}/$${FIND_NAME}"
        exists( $${TEST_NAME} ) : \
            break()
        BASE_NAME = "$$dirname( BASE_NAME )"
        isEmpty( BASE_NAME ) : \
            break()
    }

    return("$${BASE_NAME}")
}
