!equals( TEMPLATE, subdirs ) {
    isEmpty( AUTO_VERSION_DIR ) {
        !load( complex_paths ) : error( Can not find feature \"complex_paths\" )
        AUTO_VERSION_DIR = "$${GENERATED_FILES_PWD}"
    }
    !load( module_depends ) : error( Can not find feature \"module_depends\" )
    !load( build_moment ) : error( Can not find feature \"build_moment\" )

    isEmpty( AUTO_REVISION ) {
        load( git_version )
        AUTO_VERSION = $${GIT_VERSION}
        AUTO_REVISION = $${GIT_REVISION}
        AUTO_BRANCH = $${GIT_BRANCH}
    }

    isEmpty( AUTO_REVISION ) {
        load( svn_version )
        AUTO_VERSION = $${SVN_VERSION}
        AUTO_REVISION = $${SVN_REVISION}
        AUTO_BRANCH = $${SVN_BRANCH}
    }

    isEmpty( AUTO_VERSION_PRODUCT ) : \
        AUTO_VERSION_PRODUCT = "$${QMAKE_TARGET_PRODUCT}"

    isEmpty( AUTO_VERSION_PRODUCT ) : \
        AUTO_VERSION_PRODUCT = "$${TARGET}"

    isEmpty( AUTO_VERSION_VENDOR ) : \
        AUTO_VERSION_VENDOR = "$${QMAKE_TARGET_COMPANY}"

    isEmpty( AUTO_VERSION_COPYRIGHT ) : \
        AUTO_VERSION_COPYRIGHT = "$${QMAKE_TARGET_COPYRIGHT}"

    isEmpty( AUTO_VERSION_LICENSE ) : \
        AUTO_VERSION_LICENSE = "$${QMAKE_TARGET_LICENSE}"

    isEmpty( AUTO_VERSION_DESCRIPTION ) : \
        AUTO_VERSION_DESCRIPTION = "$${QMAKE_TARGET_DESCRIPTION}"


    AUTO_VERSION_NAMESPACE = $${TARGET}_AutoVersion
    AUTO_VERSION_NAMESPACE = $$replace( AUTO_VERSION_NAMESPACE, [$$escape_expand(\\W)], _ )
    AUTO_VERSION_PWD = "$${GENERATED_FILES_DIR}"
    AUTO_VERSION_H_FILE = "$${AUTO_VERSION_PWD}/AutoVersion_p.h"
    AUTO_VERSION_CPP_FILE = "$${AUTO_VERSION_PWD}/AutoVersion_p.cpp"


    win32* {
        AUTO_VERSION_EXPORT_DECLARE = "__declspec(dllexport)"
        AUTO_VERSION_IMPORT_DECLARE = "__declspec(dllimport)"
    }


    # HEADER FILE
    AUTO_VERSION_H_CONTENTS += \
        "$${LITERAL_HASH}pragma once" \
        "$${LITERAL_HASH}ifndef $${AUTO_VERSION_NAMESPACE}_H" \
        "$${LITERAL_HASH}define $${AUTO_VERSION_NAMESPACE}_H" \
        "//" \
        "$${LITERAL_HASH}include <AutoVersion.h>" \
        "//" \
        "$${LITERAL_HASH}ifdef AUTO_VERSION_EXPORT" \
        "$${LITERAL_HASH}undef AUTO_VERSION_EXPORT" \
        "$${LITERAL_HASH}endif // AUTO_VERSION_EXPORT" \
        "//" \
        "$${LITERAL_HASH}ifdef EXPORT_$${AUTO_VERSION_NAMESPACE}" \
        "$${LITERAL_HASH}define AUTO_VERSION_EXPORT $${AUTO_VERSION_EXPORT_DECLARE}" \
        "$${LITERAL_HASH}else" \
        "$${LITERAL_HASH}define AUTO_VERSION_EXPORT $${AUTO_VERSION_IMPORT_DECLARE}" \
        "$${LITERAL_HASH}endif // $${AUTO_VERSION_NAMESPACE}_EXPORT" \
        "//" \
        "namespace $${AUTO_VERSION_NAMESPACE}" \
        "{" \
        "    inline ::AutoVersion::Info info ()" \
        "    {" \
        "        ::AutoVersion::Info result;" \
        "        result.product = \"$${AUTO_VERSION_PRODUCT}\";" \
        "        result.version = \"$${AUTO_VERSION}\";" \
        "        result.revision = \"$${AUTO_REVISION}\";" \
        "        result.date = \"$${BUILD_DATE}\";" \
        "        result.time = \"$${BUILD_TIME}\";" \
        "        result.vendor = \"$${AUTO_VERSION_VENDOR}\";" \
        "        result.copyright = \"$${AUTO_VERSION_COPYRIGHT}\";" \
        "        result.license = \"$${AUTO_VERSION_LICENSE}\";" \
        "        result.description = \"$${AUTO_VERSION_DESCRIPTION}\";" \
        "        return result;" \
        "    }" \
        "}" \
        "//" \
        "namespace $${AUTO_VERSION_NAMESPACE}" \
        "{" \
        "    AUTO_VERSION_EXPORT ::AutoVersion::Version version ();" \
        "}" \
        "//" \
        "$${LITERAL_HASH}endif // $${AUTO_VERSION_NAMESPACE}_H" \


    # SOURCE FILE
    # Generation includes of dependencies
    for( depend, LOADED_DEPENDS ) {
        AUTO_VERSION_H_TEMP_FILE = "$${AUTO_VERSION_DIR}/$${depend}/AutoVersion_p.h"
        !isEqual( AUTO_VERSION_H_FILE, $${AUTO_VERSION_H_TEMP_FILE} ) : \
            exists( $${AUTO_VERSION_H_TEMP_FILE} ) : \
                AUTO_VERSION_CPP_CONTENTS += \
                    "$${LITERAL_HASH}include \"$${AUTO_VERSION_H_TEMP_FILE}\""
    }

    AUTO_VERSION_CPP_CONTENTS += \
        "$${LITERAL_HASH}define EXPORT_$${AUTO_VERSION_NAMESPACE}" \
        "//" \
        "$${LITERAL_HASH}include \"AutoVersion_p.h\"" \
        "//" \

    AUTO_VERSION_CPP_CONTENTS += \
        "//" \
        "namespace $${AUTO_VERSION_NAMESPACE}" \
        "{" \
        "    ::AutoVersion::Version version ()" \
        "    {" \
        "        ::AutoVersion::Version result;" \
        "        result.info = ::$${AUTO_VERSION_NAMESPACE}::info();" \

    # Generation tree of dependencies
    for( depend, LOADED_DEPENDS ) {
        AUTO_VERSION_H_TEMP_FILE = "$${AUTO_VERSION_DIR}/$${depend}/AutoVersion_p.h"
        AUTO_VERSION_TEMP_NAMESPACE = $${depend}_AutoVersion
        AUTO_VERSION_TEMP_NAMESPACE = $$replace( AUTO_VERSION_TEMP_NAMESPACE, [$$escape_expand(\\W)], _ )
        !isEqual( AUTO_VERSION_TEMP_NAMESPACE, $${AUTO_VERSION_NAMESPACE} ) : \
            exists( $${AUTO_VERSION_H_TEMP_FILE} ) : \
                AUTO_VERSION_CPP_CONTENTS += \
                    "        {" \
                    "            ::AutoVersion::Dependency dependency;" \
                    "            dependency.info = ::$${AUTO_VERSION_TEMP_NAMESPACE}::info();" \
                    "            dependency.version = ::$${AUTO_VERSION_TEMP_NAMESPACE}::version();" \
                    "            result.dependencies.push_back( dependency );" \
                    "        }"
    }

    AUTO_VERSION_CPP_CONTENTS += \
        "        return result;" \
        "    }" \
        "}" \

    # SOURCE FILE APP ADDITION
    equals( TEMPLATE, app ) {
        AUTO_VERSION_CPP_CONTENTS += \
            "//" \
            "namespace AutoVersion" \
            "{" \
            "    ::AutoVersion::Version version ()" \
            "    {" \
            "        return ::$${AUTO_VERSION_NAMESPACE}::version();" \
            "    }" \
            "}"
    }

    message( [$$basename( _PRO_FILE_ )]: Generate version header file $${AUTO_VERSION_H_FILE}. )
    message( [$$basename( _PRO_FILE_ )]: Generate version source file $${AUTO_VERSION_CPP_FILE}. )

    # Механизм QMAKE_SUBSTITUTES с параметром .depends.cache.in не работает для msvc,
    # поэтому формирование файла реализовано через echo с перенаправлением в файл.
    win32* {
        !exists( $${AUTO_VERSION_PWD} ) : \
            system( mkdir \"$${AUTO_VERSION_PWD}\" )

        system( echo // This file was generated by auto_version feature> \"$${AUTO_VERSION_H_FILE}\" )
        for( h_line, AUTO_VERSION_H_CONTENTS ) {
            h_line = $$replace( h_line, "<", "^<" )
            h_line = $$replace( h_line, ">", "^>" )
            h_line = $$replace( h_line, "&", "^&" )
            system( echo $${h_line}>> \"$${AUTO_VERSION_H_FILE}\" )
        }

        system( echo // This file was generated by auto_version feature> \"$${AUTO_VERSION_CPP_FILE}\" )
        for( cpp_line, AUTO_VERSION_CPP_CONTENTS ) : \
            system( echo $${cpp_line}>> \"$${AUTO_VERSION_CPP_FILE}\" )
    } else {
        !exists( $${AUTO_VERSION_PWD} ) : \
            system( mkdir \'$${AUTO_VERSION_PWD}\' )

        system( echo \'// This file was generated by auto_version feature\' > \'$${AUTO_VERSION_H_FILE}\' )
        for( h_line, AUTO_VERSION_H_CONTENTS ) : \
            system( echo \'$${h_line}\' >> \'$${AUTO_VERSION_H_FILE}\' )

        system( echo \'// This file was generated by auto_version feature\' > \'$${AUTO_VERSION_CPP_FILE}\' )
        for( cpp_line, AUTO_VERSION_CPP_CONTENTS ) : \
            system( echo \'$${cpp_line}\' >> \'$${AUTO_VERSION_CPP_FILE}\' )
    }

    INCLUDEPATH *= \
        $${PWD}/include \

    DEPENDPATH *= \
        $${PWD}/include \

    HEADERS *= \
        "$${AUTO_VERSION_H_FILE}" \

    SOURCES *= \
        "$${AUTO_VERSION_CPP_FILE}" \

    DEFINES *= \
        QMAKE_AUTO_VERSION_USED \

    unset( AUTO_VERSION_H_FILE )
    unset( AUTO_VERSION_CPP_FILE )
    unset( AUTO_VERSION_H_CONTENTS )
    unset( AUTO_VERSION_CPP_CONTENTS )
    unset( AUTO_VERSION_NAMESPACE )
    unset( AUTO_VERSION_H_TEMP_FILE )
    unset( AUTO_VERSION_TEMP_NAMESPACE )
}
