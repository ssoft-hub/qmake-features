!load( message_logging ) : error( Can not find feature \"message_logging\" )
!load( file_system ) : errorLogging( Can not find feature \"file_system\" )
!load( module_depends ) : errorLogging( "Can not find feature \"module_depends\"" )
!load( build_moment ) : errorLogging( "Can not find feature \"build_moment\"" )
!load( complex_paths ) : errorLogging( "Can not find feature \"complex_paths\"" )
!load( git_version ) : errorLogging( "Can not find feature \"git_version\"" )
!load( svn_version ) : errorLogging( "Can not find feature \"svn_version\"" )
!load( include_files ) : errorLogging( "Can not find feature \"include_files\"" )

defineTest( generateAutoVersionFiles ) \
{
    AUTO_VERSION.version =

    contains( TEMPLATE, .*lib ) : \
        AUTO_VERSION.variant = lib

    CONFIG( static ) : \
        AUTO_VERSION.variant = header_only

    contains( TEMPLATE, .*app ) : \
        AUTO_VERSION.variant = app

    isEmpty( AUTO_VERSION.gen_dir ) \
    {
        AUTO_VERSION.gen_dir = "$${COMPLEX.gen_dir}/AutoVersion"
    }

    isEmpty( AUTO_VERSION.revision ) \
    {
        AUTO_VERSION.version = "$${GIT.version}"
        AUTO_VERSION.revision = "$${GIT.revision}"
        AUTO_VERSION.branch = "$${GIT.branch}"
        AUTO_VERSION.revision_moment = "$${GIT.revision_moment}"
    }

    isEmpty( AUTO_VERSION.revision ) \
    {
        AUTO_VERSION.version = "$${SVN.version}"
        AUTO_VERSION.revision = "$${SVN.revision}"
        AUTO_VERSION.branch = "$${SVN.branch}"
        AUTO_VERSION.revision_moment = "$${SVN.revision_moment}"
    }

    AUTO_VERSION.compile_moment = "$$currentDate() $$currentTime()"

    isEmpty( AUTO_VERSION.product ) : \
        AUTO_VERSION.product = "$${QMAKE_TARGET_PRODUCT}"

    isEmpty( AUTO_VERSION.product ) : \
        AUTO_VERSION.product = "$${TARGET}"

    isEmpty( AUTO_VERSION.vendor ) : \
        AUTO_VERSION.vendor = "$${QMAKE_TARGET_COMPANY}"

    isEmpty( AUTO_VERSION.copyright ) : \
        AUTO_VERSION.copyright = "$${QMAKE_TARGET_COPYRIGHT}"

    isEmpty( AUTO_VERSION.license ) : \
        AUTO_VERSION.license = "$${QMAKE_TARGET_LICENSE}"

    isEmpty( AUTO_VERSION.description ) : \
        AUTO_VERSION.description = "$${QMAKE_TARGET_DESCRIPTION}"

    isEmpty( AUTO_VERSION.version ) : \
        AUTO_VERSION.version = "$${VERSION}"

    isEmpty( AUTO_VERSION.version ) : \
        AUTO_VERSION.version = "1.0.0"

    TEMP_LIST = $$split( AUTO_VERSION.version, '.' )
    TEMP.first = $$lower( $$member(TEMP_LIST, 0) )
    isEqual( TEMP.first, "v" ) \
    {
        TEMP.major = $$lower( $$member(TEMP_LIST, 1) )
        TEMP.minor = $$member(TEMP_LIST, 2)
        TEMP.patch = $$member(TEMP_LIST, 3)
    } \
    else \
    {
        TEMP.major = $$lower( $$member(TEMP_LIST, 0) )
        TEMP.major = $$replace( TEMP.major, "v", "" )
        TEMP.minor = $$member(TEMP_LIST, 1)
        TEMP.patch = $$member(TEMP_LIST, 2)
    }

    CHECK.major = $$replace( TEMP.major, [$$escape_expand(\\D)], "0" )
    CHECK.minor = $$replace( TEMP.minor, [$$escape_expand(\\D)], "0" )
    CHECK.patch = $$replace( TEMP.patch, [$$escape_expand(\\D)], "0" )

    isEqual( TEMP.major, $${CHECK.major} ) : isEqual( TEMP.minor, $${CHECK.minor} ) : isEqual( TEMP.patch, $${CHECK.patch} ) \
    {
        AUTO_VERSION.major = $${TEMP.major}
        AUTO_VERSION.minor = $${TEMP.minor}
        AUTO_VERSION.patch = $${TEMP.patch}
    }

    unset( TEMP )
    unset( CHECK )

    isEmpty( AUTO_VERSION.major ) : AUTO_VERSION.major = "1"
    isEmpty( AUTO_VERSION.minor ) : AUTO_VERSION.minor = "0"
    isEmpty( AUTO_VERSION.patch ) : AUTO_VERSION.patch = "0"

    isEqual( QT_MAJOR_VERSION, 5 ) : isEmpty( VERSION ) \
    {
        CONFIG *= skip_target_version_ext
        VERSION = $${AUTO_VERSION.major}.$${AUTO_VERSION.minor}.$${AUTO_VERSION.patch}
    }

    AUTO_VERSION.target = $${TARGET}
    AUTO_VERSION.target = $$replace( AUTO_VERSION.target, [$$escape_expand(\\W)], _ )
    AUTO_VERSION.namespace = $${AUTO_VERSION.target}_AutoVersion

    isEqual( AUTO_VERSION.variant, app ) \
    {
        # Too large windows paths error
        win32 | win64 \
        {
            CONFIG -= \
                object_parallel_to_source \
                object_with_source \

            AUTO_VERSION.pwd = "$${AUTO_VERSION.gen_dir}/$${TARGET}"
        } \
        else \
        {
            AUTO_VERSION.pwd = "$${AUTO_VERSION.gen_dir}/$${MODULE.base_dir}"
        }
    } \
    else \
    {
        AUTO_VERSION.pwd = "$${AUTO_VERSION.gen_dir}/$${TARGET}"
    }

    win32 | win64 \
    {
        AUTO_VERSION_EXPORT_DECLARE = "__declspec(dllexport)"
        AUTO_VERSION_IMPORT_DECLARE = "__declspec(dllimport)"
    }

    AUTO_VERSION.header_file = "$${AUTO_VERSION.pwd}/AutoVersion_p.h"
    HEADERS *= "$${AUTO_VERSION.header_file}"

    isEqual( AUTO_VERSION.variant, header_only ) \
    {
        AUTO_VERSION_EXPORT_INLINE = "inline "
    } \
    else \
    {
        AUTO_VERSION_EXPORT_VALUE = "AUTO_VERSION_EXPORT "
        AUTO_VERSION.source_file = "$${AUTO_VERSION.pwd}/AutoVersion_p.cpp"
        SOURCES *= "$${AUTO_VERSION.source_file}"
    }

    tab = $$escape_expand(\\t)

    # HEADER FILE
    AUTO_VERSION_H_CONTENTS += \
        "$${LITERAL_HASH}pragma once" \
        "$${LITERAL_HASH}ifndef $${AUTO_VERSION.namespace}_H" \
        "$${LITERAL_HASH}define $${AUTO_VERSION.namespace}_H" \
        "//" \
        "$${LITERAL_HASH}include <AutoVersion/Base.h>" \

    AUTO_VERSION_H_CONTENTS += \
        "//" \
        "$${LITERAL_HASH}ifdef AUTO_VERSION_EXPORT" \
        "$${LITERAL_HASH}undef AUTO_VERSION_EXPORT" \
        "$${LITERAL_HASH}endif // AUTO_VERSION_EXPORT" \
        "//" \
        "$${LITERAL_HASH}ifdef EXPORT_$${AUTO_VERSION.namespace}" \
        "$${LITERAL_HASH}define AUTO_VERSION_EXPORT $${AUTO_VERSION_EXPORT_DECLARE}" \
        "$${LITERAL_HASH}else" \
        "$${LITERAL_HASH}define AUTO_VERSION_EXPORT $${AUTO_VERSION_IMPORT_DECLARE}" \
        "$${LITERAL_HASH}endif // $${AUTO_VERSION.namespace}_EXPORT" \
        "//" \
        "inline ::AutoVersion::Info compileInfoAbout_$${AUTO_VERSION.target} ()" \
        "{" \
        "$${tab}static ::AutoVersion::Info result;" \
        "$${tab}if ( !result.m_attributes.empty() )" \
        "$${tab}$${tab}return result;" \
        "//" \

    isEqual( AUTO_VERSION.variant, header_only ) \
    {
        AUTO_VERSION_H_CONTENTS += \
            "$${tab}result[ ::AutoVersion::Info::key( \"compile.mode\" ) ] = ::AutoVersion::Info::attribute( L\"static\" );" \
    }
    isEqual( AUTO_VERSION.variant, lib ) \
    {
        AUTO_VERSION_H_CONTENTS += \
            "$${tab}result[ ::AutoVersion::Info::key( \"compile.mode\" ) ] = ::AutoVersion::Info::attribute( L\"dynamic\" );" \
    }
    isEqual( AUTO_VERSION.variant, app ) \
    {
        AUTO_VERSION_H_CONTENTS += \
            "$${tab}result[ ::AutoVersion::Info::key( \"compile.mode\" ) ] = ::AutoVersion::Info::attribute( L\"application\" );" \
    }

    AUTO_VERSION_H_CONTENTS += \
        "$${tab}result[ ::AutoVersion::Info::key( \"compile.branch\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.branch}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"compile.moment\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.compile_moment}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"copyright\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.copyright}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"description\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.description}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"license\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.license}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"product\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.product}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"revision\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.revision}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"revision.moment\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.revision_moment}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"vendor\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.vendor}\" );" \
        "$${tab}result[ ::AutoVersion::Info::key( \"version\" ) ] = ::AutoVersion::Info::attribute( L\"$${AUTO_VERSION.version}\" );" \
        "$${tab}return result;" \
        "}" \
        "//" \
        "extern \"C\" $${AUTO_VERSION_EXPORT_VALUE}::AutoVersion::Info runtimeInfoAbout_$${AUTO_VERSION.target} ();" \
        "extern \"C\" $${AUTO_VERSION_EXPORT_VALUE}::AutoVersion::CompileVersion::OptionalDependencies compileDependenciesOf_$${AUTO_VERSION.target} ();" \
        "//" \

    AUTO_VERSION_H_CONTENTS_END += \
        "//" \
        "$${LITERAL_HASH}endif // $${AUTO_VERSION.namespace}_H" \

    # SOURCE FILE
    # Generation includes of dependencies
    AUTO_VERSION_CPP_CONTENTS += \
        "$${LITERAL_HASH}define EXPORT_$${AUTO_VERSION.namespace}" \
        "$${LITERAL_HASH}include \"AutoVersion_p.h\"" \
        "$${LITERAL_HASH}include <AutoVersion/Module.h>" \

    for( depend, DEPENDS.loaded ) \
    {
        AUTO_VERSION_H_TEMP_FILE = "$${AUTO_VERSION.gen_dir}/$${depend}/AutoVersion_p.h"
        !isEqual( AUTO_VERSION.header_file, $${AUTO_VERSION_H_TEMP_FILE} ) : \
            exists( $${AUTO_VERSION_H_TEMP_FILE} ) : \
                AUTO_VERSION_CPP_CONTENTS += \
                    "$${LITERAL_HASH}include \"$${AUTO_VERSION_H_TEMP_FILE}\""
    }

    contains( QT, core ) : \
        AUTO_VERSION_CPP_CONTENTS += \
            "$${LITERAL_HASH}include <QtGlobal>" \

    AUTO_VERSION_CPP_CONTENTS += \
        "//" \
        "::AutoVersion::Info runtimeInfoAbout_$${AUTO_VERSION.target} () { return ::compileInfoAbout_$${AUTO_VERSION.target}(); } " \

    AUTO_VERSION_CPP_CONTENTS += \
        "//" \
        "::AutoVersion::CompileVersion::OptionalDependencies compileDependenciesOf_$${AUTO_VERSION.target} ()" \
        "{" \
        "$${tab} using namespace ::AutoVersion;" \
        "//" \
        "$${tab}static CompileVersion::Dependencies result;" \
        "$${tab}if ( !result.empty() )" \
        "$${tab}$${tab}return &result;" \
        "//" \

    # Generation tree of dependencies
    for( depend, DEPENDS.loaded ) \
    {
        AUTO_VERSION_H_TEMP_FILE = "$${AUTO_VERSION.gen_dir}/$${depend}/AutoVersion_p.h"
        AUTO_VERSION_TEMP.target = $${depend}
        AUTO_VERSION_TEMP.target = $$replace( AUTO_VERSION_TEMP.target, [$$escape_expand(\\W)], _ )
        AUTO_VERSION_TEMP.namespace = $${AUTO_VERSION_TEMP.target}_AutoVersion
        !isEqual( AUTO_VERSION_TEMP.namespace, $${AUTO_VERSION.namespace} ) : \
            exists( $${AUTO_VERSION_H_TEMP_FILE} ) : \
                AUTO_VERSION_CPP_CONTENTS += \
                    "$${tab}{" \
                    "$${tab}$${tab}CompileVersion::Dependency dependency;" \
                    "$${tab}$${tab}dependency.m_info = ::compileInfoAbout_$${AUTO_VERSION_TEMP.target}();" \
                    "$${tab}$${tab}CompileVersion::DependenciesMethod dependencies_method = CompileVersion::DependenciesMethod( resolveMethod( \"$${AUTO_VERSION_TEMP.target}\", \"compileDependenciesOf_$${AUTO_VERSION_TEMP.target}\" ) );" \
                    "$${tab}$${tab}if ( dependencies_method )" \
                    "$${tab}$${tab}$${tab}dependency.m_dependencies = dependencies_method();" \
                    "$${tab}$${tab}result.push_back( dependency );" \
                    "$${tab}}" \
    }

    contains( QT, core ) \
    {
        isEqual( QT_MAJOR_VERSION, 5 ) \
        {
            CONFIG( debug, debug|release ) \
            {
                QT_CORE_PRODUCT = "Qt5Cored"
            } \
            else \
            {
                QT_CORE_PRODUCT = "Qt5Core"
            }

            AUTO_VERSION_CPP_CONTENTS += \
                "//" \
                "$${tab}{" \
                "$${tab}$${tab}::AutoVersion::CompileVersion qt_info;" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"copyright\" ) ] = ::AutoVersion::Info::attribute( \"Copyright (C) 2019 The Qt Company Ltd.\" );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"description\" ) ] = ::AutoVersion::Info::attribute( \"C++ Application Development Framework\" );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"license\" ) ] = ::AutoVersion::Info::attribute( \"GPL and LGPLv3 open source licenses\" ) ;" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"product\" ) ] = ::AutoVersion::Info::attribute( \"$${QT_CORE_PRODUCT}\" );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"revision\" ) ] = ::AutoVersion::Info::attribute( QT_VERSION_STR );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"vendor\" ) ] = ::AutoVersion::Info::attribute( \"The Qt Company Ltd.\" );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"version\" ) ] = ::AutoVersion::Info::attribute( QT_VERSION_STR );" \
                "$${tab}$${tab}result.push_back( qt_info );" \
                "$${tab}}"
        }

        isEqual( QT_MAJOR_VERSION, 4 ) \
        {
            CONFIG( debug, debug|release ) \
            {
                QT_CORE_PRODUCT = "QtCore4d"
            } \
            else \
            {
                QT_CORE_PRODUCT = "QtCore4"
            }

            AUTO_VERSION_CPP_CONTENTS += \
                "//" \
                "$${tab}{" \
                "$${tab}$${tab}::AutoVersion::CompileVersion qt_info;" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"copyright\" ) ] = ::AutoVersion::Info::attribute( \"Copyright (C) 2015 The Qt Company Ltd.\" );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"description\" ) ] = ::AutoVersion::Info::attribute( \"C++ Application Development Framework\" );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"license\" ) ] = ::AutoVersion::Info::attribute( \"GPL and LGPLv2.1 open source licenses\" ) ;" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"product\" ) ] = ::AutoVersion::Info::attribute( \"$${QT_CORE_PRODUCT}\" );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"revision\" ) ] = ::AutoVersion::Info::attribute( QT_VERSION_STR );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"vendor\" ) ] = ::AutoVersion::Info::attribute( \"The Qt Company Ltd.\" );" \
                "$${tab}$${tab}qt_info.m_info[ ::AutoVersion::Info::key( \"version\" ) ] = ::AutoVersion::Info::attribute( QT_VERSION_STR );" \
                "$${tab}$${tab}result.push_back( qt_info );" \
                "$${tab}}"
        }
    }

    AUTO_VERSION_CPP_CONTENTS += \
        "//" \
        "$${tab}return &result;" \
        "}" \

    # SOURCE FILE APP ADDITION
    isEqual( AUTO_VERSION.variant, app ) \
    {
        AUTO_VERSION_CPP_CONTENTS += \
            "//" \
            "$${LITERAL_HASH}include <AutoVersion/Application.h>" \
            "//" \
            "namespace AutoVersion" \
            "{" \
            "$${tab}::AutoVersion::Info info ()" \
            "$${tab}{" \
            "$${tab}$${tab}return ::compileInfoAbout_$${AUTO_VERSION.target}();" \
            "$${tab}}" \
            "//" \
            "$${tab}::AutoVersion::CompileVersion compileVersion ()" \
            "$${tab}{" \
            "$${tab}$${tab}::AutoVersion::CompileVersion result;" \
            "$${tab}$${tab}result.m_info = compileInfoAbout_$${AUTO_VERSION.target}();" \
            "$${tab}$${tab}result.m_dependencies = compileDependenciesOf_$${AUTO_VERSION.target}();" \
            "$${tab}$${tab}return result;" \
            "$${tab}}" \
            "//" \
            "$${tab}::AutoVersion::RuntimeVersion runtimeVersion ()" \
            "$${tab}{" \
            "$${tab}$${tab}return ::AutoVersion::Application().runtimeVersion();" \
            "$${tab}}" \
            "//" \
            "$${tab}::AutoVersion::Version version ()" \
            "$${tab}{" \
            "$${tab}$${tab}::AutoVersion::Version result;" \
            "$${tab}$${tab}result.m_compile = ::AutoVersion::compileVersion();" \
            "$${tab}$${tab}result.m_runtime = ::AutoVersion::runtimeVersion();" \
            "$${tab}$${tab}return result;" \
            "$${tab}}" \
            "}"
    }

    messageLogging( Generate version header file $${AUTO_VERSION.header_file}. )
    !writeToFile( "$${AUTO_VERSION.header_file}", $${AUTO_VERSION_H_CONTENTS} ) : \
        return( false )

    !isEqual( AUTO_VERSION.variant, header_only ) \
    {
        messageLogging( Generate version source file $${AUTO_VERSION.source_file}. )
        !writeToFile( "$${AUTO_VERSION.source_file}", $${AUTO_VERSION_CPP_CONTENTS} ) : \
            return( false )
    } \
    else \
    {
        !appendToFile( "$${AUTO_VERSION.header_file}", $${AUTO_VERSION_CPP_CONTENTS} ) : \
            return( false )
    }

    !appendToFile( "$${AUTO_VERSION.header_file}", $${AUTO_VERSION_H_CONTENTS_END} ) : \
        return( false )

    INCLUDEPATH *= \
        $${PWD}/include \

    DEPENDPATH *= \
        $${PWD}/include \

    DEFINES *= \
        AUTO_VERSION_USED \

    export( CONFIG )
    export( DEFINES )
    export( DEPENDPATH )
    export( HEADERS )
    export( INCLUDEPATH )
    export( SOURCES )
    export( VERSION )

    export( AUTO_VERSION.branch )
    export( AUTO_VERSION.compile_moment )
    export( AUTO_VERSION.copyright )
    export( AUTO_VERSION.description )
    export( AUTO_VERSION.gen_dir )
    export( AUTO_VERSION.header_file )
    export( AUTO_VERSION.license )
    export( AUTO_VERSION.major )
    export( AUTO_VERSION.minor )
    export( AUTO_VERSION.namespace )
    export( AUTO_VERSION.patch )
    export( AUTO_VERSION.product )
    export( AUTO_VERSION.pwd )
    export( AUTO_VERSION.revision )
    export( AUTO_VERSION.revision_moment )
    export( AUTO_VERSION.source_file )
    export( AUTO_VERSION.variant )
    export( AUTO_VERSION.vendor )
    export( AUTO_VERSION.version )

    return( true )
}

!contains( TEMPLATE, .*subdirs ) : \
    !generateAutoVersionFiles() : \
        errorLogging( AutoVersion files generation failed. )

isEqual( AUTO_VERSION.variant, app ) \
{
    win*: LIBS *= -lVersion

    isEqual( QT_MAJOR_VERSION, 4 ) : contains( QT, gui ) : \
            AUTO_VERSION.qt_about_widget = true

    isEqual( QT_MAJOR_VERSION, 5 ) : contains( QT, widgets ) : \
            AUTO_VERSION.qt_about_widget = true
}

isEqual( AUTO_VERSION.qt_about_widget, true ) \
{
    includeFiles( $${PWD}/src/Qt/AutoVersion )
}
