!equals( TEMPLATE, subdirs ) {

    !load( win_export ) : error( Can not find feature \"win_export\" )
    !load( complex_paths ) : error( Can not find feature \"complex_paths\" )
    !load( module_depends ) : error( Can not find feature \"module_depends\" )
    !load( build_moment ) : error( Can not find feature \"build_moment\" )

    isEmpty( AUTO_REVISION ) {
        load( git_version )
        AUTO_VERSION = $${GIT_VERSION}
        AUTO_REVISION = $${GIT_REVISION}
        AUTO_BRANCH = $${GIT_BRANCH}
    }

    AUTO_VERSION_NAMESPACE = $${TARGET}_Version
    AUTO_VERSION_NAMESPACE = $$replace( AUTO_VERSION_NAMESPACE, [- .], _ )
    AUTO_VERSION_H_FILE = "$${GENERATED_FILES_DIR}/auto_version.h"
    AUTO_VERSION_CPP_FILE = "$${GENERATED_FILES_DIR}/auto_version.cpp"

    AUTO_VERSION_H_CONTENTS += \
        "$${LITERAL_HASH}pragma once" \
        "$${LITERAL_HASH}ifndef $${AUTO_VERSION_NAMESPACE}_H" \
        "$${LITERAL_HASH}define $${AUTO_VERSION_NAMESPACE}_H" \
        "//" \

    for( depend, LOADED_DEPENDS ) {
        AUTO_VERSION_H_TEMP_FILE = "$${GENERATED_FILES_PWD}/$${depend}/auto_version.h"

        exists( $${AUTO_VERSION_H_TEMP_FILE} ) : \
            AUTO_VERSION_H_CONTENTS += \
                "$${LITERAL_HASH}include \"$${AUTO_VERSION_H_TEMP_FILE}\""
    }

    AUTO_VERSION_H_CONTENTS += \
        "//" \
        "$${LITERAL_HASH}ifdef AUTO_VERSION_EXPORT" \
        "$${LITERAL_HASH}undef AUTO_VERSION_EXPORT" \
        "$${LITERAL_HASH}endif" \
        "//" \
        "$${LITERAL_HASH}ifndef $${AUTO_VERSION_NAMESPACE}_EXPORT" \
        "$${LITERAL_HASH}define AUTO_VERSION_EXPORT $${WIN_EXPORT_DECLARE}" \
        "$${LITERAL_HASH}else" \
        "$${LITERAL_HASH}define AUTO_VERSION_EXPORT $${WIN_IMPORT_DECLARE}" \
        "$${LITERAL_HASH}endif" \
        "//" \
        "namespace $${AUTO_VERSION_NAMESPACE}" \
        "{" \
        "  inline const char * compileVersion () { return \"$${AUTO_VERSION}\"; }" \
        "  inline const char * compileRevision () { return \"$${AUTO_REVISION}\"; }" \
        "}" \
        "//" \
        "namespace $${AUTO_VERSION_NAMESPACE}" \
        "{" \
        "  AUTO_VERSION_EXPORT const char * runtimeVersion ();" \
        "  AUTO_VERSION_EXPORT const char * runtimeRevision ();" \
        "  AUTO_VERSION_EXPORT const char * buildDate ();"\
        "  AUTO_VERSION_EXPORT const char * buildTime ();" \
        "}" \
        "//" \
        "namespace $${AUTO_VERSION_NAMESPACE}" \
        "{" \
        "  inline const char * vendor () { return \"$${VENDOR_INFO}\"; }" \
        "  inline const char * copyright () { return \"$${COPYRIGHT_INFO}\"; }" \
        "  inline const char * license () { return \"$${LICENSE_INFO}\"; }" \
        "  inline const char * description () { return \"$${DESCRIPTION_INFO}\"; }" \
        "}" \
        "//" \
        "$${LITERAL_HASH}endif" \

    AUTO_VERSION_CPP_CONTENTS += \
        "$${LITERAL_HASH}include \"version.h\"" \
        "//" \
        "$${LITERAL_HASH}define $${AUTO_VERSION_NAMESPACE}_EXPORT" \
        "//" \
        "namespace $${AUTO_VERSION_NAMESPACE}" \
        "{" \
        "  const char * runtimeVersion () { return \"$${AUTO_VERSION}\"; }" \
        "  const char * runtimeRevision () { return \"$${AUTO_REVISION}\"; }" \
        "  const char * buildDate () { return \"$${BUILD_DATE}\"; }" \
        "  const char * buildTime () { return \"$${BUILD_TIME}\"; }" \
        "}" \
        "//" \

    message( [$$basename( _PRO_FILE_ )]: Generate version header file $${AUTO_VERSION_H_FILE}. )
    message( [$$basename( _PRO_FILE_ )]: Generate version source file $${AUTO_VERSION_CPP_FILE}. )

    # Механизм QMAKE_SUBSTITUTES с параметром .depends.cache.in не работает для msvc,
    # поэтому формирование файла реализовано через echo с перенаправлением в файл.
    win* {
        system( echo // This file was generated by auto_version feature.> \"$${AUTO_VERSION_H_FILE}\" )
        for( h_line, AUTO_VERSION_H_CONTENTS ) : \
            system( echo $${h_line}>> \"$${AUTO_VERSION_H_FILE}\" )

        system( echo // This file was generated by auto_version feature.> \"$${AUTO_VERSION_CPP_FILE}\" )
        for( cpp_line, AUTO_VERSION_CPP_CONTENTS ) : \
            system( echo $${cpp_line}>> \"$${AUTO_VERSION_CPP_FILE}\" )
    }
    unix {
        system( echo \'// This file was generated by auto_version feature.\' > \'$${AUTO_VERSION_H_FILE}\' )
        for( h_line, AUTO_VERSION_H_CONTENTS ) : \
            system( echo \'$${h_line}\' >> \'$${AUTO_VERSION_H_FILE}\' )

        system( echo \'// This file was generated by auto_version feature.\' > \'$${AUTO_VERSION_CPP_FILE}\' )
        for( cpp_line, AUTO_VERSION_CPP_CONTENTS ) : \
            system( echo \'$${cpp_line}\' >> \'$${AUTO_VERSION_CPP_FILE}\' )
    }

    HEADERS *= \
        "$${AUTO_VERSION_H_FILE}" \

    SOURCES *= \
        "$${AUTO_VERSION_CPP_FILE}" \

    unset( AUTO_VERSION_H_FILE )
    unset( AUTO_VERSION_H_CONTENTS )
    unset( AUTO_VERSION_CPP_FILE )
    unset( AUTO_VERSION_CPP_CONTENTS )
    unset( AUTO_VERSION_NAMESPACE )
    unset( AUTO_VERSION_H_TEMP_FILE )
}
