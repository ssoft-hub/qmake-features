// This file was generated by auto_version feature.
#pragma once
#ifndef LemzTools_Version_H
#define LemzTools_Version_H
//
#include "D:/Working/LemzSDKComplex/build/qt.4.7.4/debug/LemzTools/auto_version.h"
#include "D:/Working/LemzSDKComplex/build/qt.4.7.4/debug/LemzGlobal/auto_version.h"
//
#ifdef AUTO_VERSION_EXPORT
#undef AUTO_VERSION_EXPORT
#endif
//
#ifndef LemzTools_Version_EXPORT
#define AUTO_VERSION_EXPORT __declspec(dllexport)
#else
#define AUTO_VERSION_EXPORT __declspec(dllimport)
#endif

#include <list>

namespace AutoVersion
{
    struct Info
    {
        const char * version;
        const char * revision;
        const char * date;
        const char * time;
        const char * vendor;
        const char * copyright;
        const char * license;
        const char * description;

        Info ()
            : version()
            , revision()
            , date()
            , time()
            , vendor()
            , copyright()
            , license()
            , description()
        {}
    };
    typedef ::std::list< Info > Infos;
}

namespace AutoVersion
{
    struct Component
    {
        const Info info;
        const Infos dependencies;
    };
    typedef ::std::list< Component > Components;
}

namespace LemzTools_Version
{
    inline ::AutoVersion::Info buildInfo ()
    {
        ::AutoVersion::Info result;
        result.version = "";
        result.revision = "e13ab44";
        result.date = "";
        result.time = "";
        result.vendor = "RPC Topaz";
        result.copyright = "Copyright 2010-2018. All rights reserved.";
        result.license = "MIT License.";
        result.description = "";
        return result;
    }

    inline ::AutoVersion::Infos buildDependencies ()
    {
        ::AutoVersion::Infos result;
        result.push_back( buildInfo() );
        //result.splice( result.cend(), LemzGlobal_Version::buildDependencies() );
        //... ;
    }

    AUTO_VERSION_EXPORT ::AutoVersion::Infos runtimeDependencies ();

    inline ::AutoVersion::Components components ()
    {
        ::AutoVersion::Components modules;
        modules.push_back( ::AutoVersion::Component( ::LemzTools_Version::buildInfo(), ::LemzTools_Version::runtimeDependencies() ) );
        modules.splice( modules.cend(), ::LemzTools_Version::components() );
    }
}

namespace LemzTools_Version
{
    ::AutoVersion::Infos runtimeDependencies ()
    {
        return buildDependencies();
    }
}

// Для приложений в cpp

namespace AutoVersion
{
    inline ::AutoVersion::Components components ()
    {
        ::AutoVersion::Components modules;
        modules.push_back( ::AutoVersion::Component( ::LemzTools_Version::buildInfo(), ::LemzTools_Version::runtimeDependencies() ) );
        modules.splice( modules.cend(), ::LemzTools_Version::components() );
    }
}

//
#endif
