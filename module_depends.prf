# Modules finding ...
!load( message_logging ) : error( Can not find feature \"message_logging\" )
!load( module_finding ) : error( Can not find feature \"module_finding\" )

defineTest( loadDependency ) {
    for( module, ARGS ) {
        DEPENDS -= "$${module}"
        LOADED_DEPENDS *= "$${module}"

        for( subdir, DEPEND_PATH ) {
            project_entry = "$${subdir}/$${module}.prf"
            exists( $${project_entry} ): \
                break()
        }
        exists( $${project_entry} ) {
            messageLogging( Load dependency $${module} from \"$${project_entry}\" )
            include( $${project_entry} )
        } else {
            !isEqual( TARGET, $${module} ) : \
                errorLogging( Can not resolve dependency $${module} )
        }
    }

    # If it needs this list can be extended (in 3 places into this file)
    export( DEPENDS )
    export( LOADED_DEPENDS )
    export( CONFIG )
    export( QMAKE_CXXFLAGS )
    export( INCLUDEPATH )
    export( DEPENDPATH )
    export( LIBS )
    export( QT )
    export( DEFINES )
    export( HEADERS )
    export( SOURCES )
    export( FORMS )
    export( LEXSOURCES )
    export( RES_FILE )
    export( RESOURCES )
    export( TRANSLATIONS )
    export( DISTFILES )
    return( true )
}

defineTest( recursiveLoadAllDependicies ) {
    for( tmp, 0..1000 ) {
        !isEmpty( DEPENDS ) {
            DEPENDS = $$unique( DEPENDS )
            loadDependency( $${DEPENDS} )
        } else {
            break()
        }
    }
    # more than
    !isEmpty( DEPENDS ) {
        error(Fatal dependency resolving)
    }

    # If it needs this list can be extended (in 3 places into this file)
    export( DEPENDS )
    export( LOADED_DEPENDS )
    export( CONFIG )
    export( QMAKE_CXXFLAGS )
    export( INCLUDEPATH )
    export( DEPENDPATH )
    export( LIBS )
    export( QT )
    export( DEFINES )
    export( HEADERS )
    export( SOURCES )
    export( FORMS )
    export( LEXSOURCES )
    export( RES_FILE )
    export( RESOURCES )
    export( TRANSLATIONS )
    export( DISTFILES )
    return(true)
}

defineTest( loadDependencies ) {
    # Include own dependencies
    DEPENDS *= $${TARGET}

    # Resolve dependencies
    if ( !isEmpty( DEPENDS ) ) {
        messageLogging( Dependencies resolving ... )
        MODULE = $$basename(_PRO_FILE_)
        $${MODULE}.depends = $${DEPENDS}
        loadDependency( $${DEPENDS} )
        recursiveLoadAllDependicies()
    }

    # Remove duplicates
    DEPENDS = $$unique( DEPENDS )
    LOADED_DEPENDS = $$unique( LOADED_DEPENDS )

    # Delete self
    LIBS -= -l$${TARGET}

    # If it needs this list can be extended (in 3 places into this file)
    export( DEPENDS )
    export( LOADED_DEPENDS )
    export( CONFIG )
    export( QMAKE_CXXFLAGS )
    export( INCLUDEPATH )
    export( DEPENDPATH )
    export( LIBS )
    export( QT )
    export( DEFINES )
    export( HEADERS )
    export( SOURCES )
    export( FORMS )
    export( LEXSOURCES )
    export( RES_FILE )
    export( RESOURCES )
    export( TRANSLATIONS )
    export( DISTFILES )
    return(true)
}

# global
loadDependencies()
