# Modules finding ...
!load( message_logging ) : error( Can not find feature \"message_logging\" )
!load( module_finding ) : errorLogging( Can not find feature \"module_finding\" )

defineTest( loadDependency ) \
{
    for( module, ARGS ) \
    {
        DEPENDS.progress -= "$${module}"

        !contains( DEPENDS.loaded, "$${module}" ) \
        {
            DEPENDS.loaded *= "$${module}"

            for( subdir, DEPEND_PATH ) \
            {
                project_entry = "$${subdir}/$${module}.prf"
                exists( "$${project_entry}" ): \
                    break()
            }

            exists( "$${project_entry}" ) \
            {
                messageLogging( Load dependency $${module} from \"$${project_entry}\" )
                include( "$${project_entry}" )
                DEPENDS.progress = $${DEPENDS}
            } \
            else \
            {
                MODULE_PRF =
                !isEqual( TARGET, "$${module}" ) : \
                    errorLogging( Can not resolve dependency $${module} )
            }
        }
    }

    # If it needs this list can be extended (in 3 places into this file)
    export( DEPENDS )
    export( DEPENDS.progress )
    export( DEPENDS.loaded )
    export( CONFIG )
    export( QMAKE_CXXFLAGS )
    export( INCLUDEPATH )
    export( DEPENDPATH )
    export( LIBS )
    export( QT )
    export( DEFINES )
    export( HEADERS )
    export( SOURCES )
    export( FORMS )
    export( LEXSOURCES )
    export( RES_FILE )
    export( RESOURCES )
    export( TRANSLATIONS )
    export( DISTFILES )
    return( true )
}

defineTest( recursiveLoadAllDependicies ) \
{
    for( i, 0..1000 ) \
    {
        !isEmpty( DEPENDS.progress ) \
        {
            loadDependency( $${DEPENDS.progress} )
        } \
        else \
        {
            break()
        }
    }

    # more than
    !isEmpty( DEPENDS.progress ) \
    {
        error(Fatal dependency resolving)
    }

    # If it needs this list can be extended (in 3 places into this file)
    export( DEPENDS )
    export( DEPENDS.progress )
    export( DEPENDS.loaded )
    export( CONFIG )
    export( QMAKE_CXXFLAGS )
    export( INCLUDEPATH )
    export( DEPENDPATH )
    export( LIBS )
    export( QT )
    export( DEFINES )
    export( HEADERS )
    export( SOURCES )
    export( FORMS )
    export( LEXSOURCES )
    export( RES_FILE )
    export( RESOURCES )
    export( TRANSLATIONS )
    export( DISTFILES )
    return(true)
}

defineTest( loadDependencies ) \
{
    # Include own dependencies
    BASE_NAME = "$${TARGET}"
    MODULE_PRF = "$${_PRO_FILE_PWD_}/$${BASE_NAME}.prf"

    exists( "$${MODULE_PRF}" ) \
    {
        include( "$${MODULE_PRF}" )
    } \
    else \
    {
        DEPENDS.progress *= "$${BASE_NAME}"
    }

    DEPENDS.progress *= $${DEPENDS}

    # Resolve dependencies
    if ( !isEmpty( DEPENDS ) ) \
    {
        messageLogging( Dependencies resolving ... )
        loadDependency( $${DEPENDS.progress} )
        recursiveLoadAllDependicies()
    }

    # Delete self
    LIBS -= -l$${TARGET}

    # If it needs this list can be extended (in 3 places into this file)
    export( DEPENDS )
    export( DEPENDS.progress )
    export( DEPENDS.loaded )
    export( CONFIG )
    export( QMAKE_CXXFLAGS )
    export( INCLUDEPATH )
    export( DEPENDPATH )
    export( LIBS )
    export( QT )
    export( DEFINES )
    export( HEADERS )
    export( SOURCES )
    export( FORMS )
    export( LEXSOURCES )
    export( RES_FILE )
    export( RESOURCES )
    export( TRANSLATIONS )
    export( DISTFILES )
    return(true)
}

# global
loadDependencies() : \
    messageLogging( Dependencies resolving completed )
