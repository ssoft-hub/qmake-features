!load( message_logging ) : error( Can not find feature \"message_logging\" )
!load( qmake_conf_path ) : errorLogging( Can not find feature \"qmake_conf_path\" )

defineTest( appendDependencyDirectories ) \
{
    unset( DEPEND_PATH_LAYER )
    for( subdir, ARGS ) \
    {
        entries = $$files( "$${subdir}/*" )
        for( entry, entries ) \
        {
            win32 : entry = "$$replace( entry, "\\\\", "/" )"
            sub_entries = $$files( "$${entry}/*" )

            !isEmpty( sub_entries ) \
            {
                DEPEND_PATH_LAYER *= "$${entry}"

                project_entry = "$${entry}/*.prf"
                sub_entries = $$files( "$${project_entry}" )

                # Если хоть один файл существует, то запоминаем директорию
                !isEmpty( sub_entries ) \
                {
                    DEPEND_PATH *= "$${entry}"
                }
            }
        }
    }
    export( DEPEND_PATH_LAYER )
    export( DEPEND_PATH )

    isEmpty( DEPEND_PATH_LAYER ) : \
        return( false )
    return( true )
}

defineTest( recursiveDefineDependencyDirectories ) \
{
    DEPEND_PATH_LAYER = $${DEPEND_PATH}
    for( i, 0..1000 ) \
    {
        !appendDependencyDirectories( $${DEPEND_PATH_LAYER} ) : \
            break()
    }
    export( DEPEND_PATH )
    return( true )
}

# Main
#!contains( TEMPLATE, .*subdirs ) \
#{
    # Попытка загрузить кеш с перечнем модулей
    win32 | win64 \
    {
        DEPENDS_CACHE_FILE = "$${QMAKE_CONF.pwd}\\.depends.cache"
    } \
    else \
    {
        DEPENDS_CACHE_FILE = "$${QMAKE_CONF.pwd}/.depends.cache"
    }

    # Если нужно сформировать кэш, то текущий не используется
    contains( DEPENDS_CACHE_CONFIG, make_depends_cache ) : \
        DEPENDS_CACHE_CONFIG *= unuse_depends_cache

    # Загрузка кэша, если он есть и нет явного флага не использовать
    !contains( DEPENDS_CACHE_CONFIG, unuse_depends_cache ) \
    {
        # При наличии файла
        exists( $${DEPENDS_CACHE_FILE} ) \
        {
            # Зачитываем
            messageLogging( Loading a cached path from $${DEPENDS_CACHE_FILE}. )
            include( $${DEPENDS_CACHE_FILE} )

            # Решение проблемы парсинга Qt Creator (начиная где-то с версии 4.5), когда файл .depends.cache не зачитывается
            isEmpty( DEPEND_PATH ) \
            {
                messageLogging( "Hacking parsing issue (Qt Creator cannot include a hiden file)." )
                win32 | win64 \
                {
                    ALTERNATIVE_DEPENDS_CACHE_FILE = "$${QMAKE_CONF.pwd}\\depends.cache"
                } \
                else \
                {
                    ALTERNATIVE_DEPENDS_CACHE_FILE = "$${QMAKE_CONF.pwd}/depends.cache"
                }
                copyFile( "$${DEPENDS_CACHE_FILE}", "$${ALTERNATIVE_DEPENDS_CACHE_FILE}" ) : \
                    include( $${ALTERNATIVE_DEPENDS_CACHE_FILE} )
                isEmpty( DEPEND_PATH ) \
                {
                    messageLogging( "Hacking error. The full finding will be used." )
                    DEPENDS_CACHE_CONFIG *= unuse_depends_cache
                }
            }
        } \
        else \
        {
            # или помечаем, что не используем кэш
            DEPENDS_CACHE_CONFIG *= unuse_depends_cache
        }
    }

    # Если не используем кэш
    contains( DEPENDS_CACHE_CONFIG, unuse_depends_cache ) \
    {
        # Осуществляем рекурсивный поиск модулей
        DEPEND_PATH = "$${QMAKE_CONF.pwd}"
        win32 : DEPEND_PATH = "$$replace( DEPEND_PATH, "\\\\", "/" )"
        recursiveDefineDependencyDirectories()

        # Выводим сообщения о найденных модулях
        for( subdir, DEPEND_PATH ) \
        {
            messageLogging( Modules found in: $${subdir} )
        }
    }

    # Если нужно сформировать файл с кэшем
    contains( DEPENDS_CACHE_CONFIG, make_depends_cache ) \
    {
        # Механизм QMAKE_SUBSTITUTES с параметром .depends.cache.in не работает для msvc,
        # поэтому формирование файла реализовано через echo с перенаправлением в файл.
        messageLogging( Saving a cached path to $${DEPENDS_CACHE_FILE}. )
        makeEmptyFile( "$${DEPENDS_CACHE_FILE}" )
        appendToFile( "$${DEPENDS_CACHE_FILE}", "DEPEND_PATH = \\" )
        for( module_path, DEPEND_PATH ) : \
            appendToFile( "$${DEPENDS_CACHE_FILE}", \""$${module_path}\" \\" )
    }
#}
